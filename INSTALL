INSTALLATION NOTES

The project provides only the source code and needs to be compiled in order to create an executable tool. The source is written in C++11. The platform must be POSIX compliant (e.g. Raspbian) and needs to support /dev/mem and /dev/vcio. The tool runs in userland. 

Contributions: This project uses the Boost library (see http://www.boost.org).

SETUP INSTRUCTIONS

$ sudo apt-get -y install libboost-dev 
$ wget https://github.com/ma16/rpio/archive/master.zip
$ unzip master
$ cd rpio-master/cc
$ make -j6
$ Console/rpio

The last line should give you a diagnostic message with the supported options. The program needs to be executed as root unless the permissions of /dev/mem and /dev/vcio are changed.

Notes:
* At the time of writing, Raspbian installed libbost1.55. The package installation may take a few minutes.
* Since a 4-core ARM is used, make is executed with 6 threads (-j6). Still, it may take several minutes until make finishes.
* Master branch and releases prior to 2017/09/21 require GCC 4.8 (g++) or older. That is, GCC 4.9 and newer will fail.

RASPBIAN INSTALLATION

The following description may be helpful if you install Raspbian for the first time.

You may want to invoke raspi-config instead; in order to make these changes and for further setups. If your system is connected to the internet, you may want to consider additional security measures.

(1) Write Image to SD Card:

A (fresh) Raspbian image (2017-04-10) is used. The SD card, which will be used on the Raspberry Pi, is prepared beforehand on a Linux desktop. We use /dev/sdX which is a wildcard for the proper device (e.g. for /dev/sdc).

$ export DEV=/dev/sdX
$ wget http://downloads.raspberrypi.org/raspbian/images/raspbian-2017-04-10/2017-04-10-raspbian-jessie.zip
$ unzip -p 2017-04-10-raspbian-jessie.zip | sudo dd of=$DEV bs=4096 status=progress

The write operation may take serveral minutes. For a class 10 SDHC card it took here nine minutes.

(2) Headless Pi with SSHD and WLAN enabled:

$ sudo mkdir -p /media/pi
$ sudo partprobe $DEV
$ sudo mount ${DEV}1 /media/pi
$ sudo touch /media/pi/ssh
$ sudo umount /media/pi
$ sudo mount ${DEV}2 /media/pi
$ echo "
network={
    ssid="APN"
    psk="PASSWORD"
}" |\
sudo tee -a /media/pi/etc/wpa_supplicant/wpa_supplicant.conf 
$ sudo umount /media/pi
$ sudo rmdir /media/pi

...where APN and PASSWORD are the WLAN login details.

(3) Boot for the First Time:

Insert the prepared SD card into your Pi (here a Raspberry Pi-2 / BCM2836) and boot it up. The file system gets automatically to cover the full SD card size and the system reboots automatically.

Login if you use the console. Start up a terminal if you use the GUI. Remote connect with ssh if sshd was already set up. The default hostname is "raspberrypi", the user is "pi" and the password is "raspberry".

E.g.
$ ssh pi@raspberrypi
[raspberry]

(4) Set Keyboard Layout:

(5) Change Password:

$ passwd
[raspberry]
[new-password]
[new-password]

(*) In case you need to set up SSH (if not already done):

$ sudo /etc/init.d/ssh start

(*) Enable SSH w/o password query:

(6) Change hostname (here: "demopi") to prevent conflicts with other Raspberry Pis (if any):

$ export HOST=demopi
$ echo $HOST | sudo tee /etc/hostname
$ sudo sed -i s/raspberrypi/$HOST/ /etc/hosts
$ sudo reboot
$ ssh pi@demopi
[new-password]

(7) Set Timezone:

REFERENCE

This project including this file is hosted at https://github.com/ma16/rpio.
